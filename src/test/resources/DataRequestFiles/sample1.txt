package pages;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;

import base.TestBase;
import utilities.Data;
import utilities.GlobalVariables;

public class DataRequestPage extends TestBase {

	protected DataRequestPage(WebDriver driver2, Data data) {
		super(driver2, data);

	}

	@FindBy(xpath = "//article//*[contains(text(),'Data Request')]") 
	private WebElement lblDataRequest;
 
	@FindBy(xpath = "//article/button")
	private WebElement btnPlusCreateDR;

	@FindBy(xpath = "//*[@data-testid='ArrowForwardIosIcon']")
	private WebElement btnForwardArrowIcon;

	@FindBy(xpath = "//input[@id='requestNameId']")
	private WebElement txtDRName;

	@FindBy(xpath = "//div[contains(text(),'Select Catalog')]")
	private WebElement lstSelectCatalog;

	@FindBy(xpath = "//button[text()='Next']")
	private WebElement btnNext;

	@FindBy(xpath = "//button[text()='Back']")
	private WebElement btnBack;

	@FindBy(xpath = "//button[text()='Cancel']")
	private WebElement btnCancel;

	@FindBy(xpath = "//button[text()='Create']")
	private WebElement btnCreate;

	@FindBy(xpath = "//button[text()='Save']")
	private WebElement btnSave;

	@FindBy(xpath = "//button[text()='Submit']")
	private WebElement btnSubmit;
	@FindBy(xpath = "//span[text()='Period']//parent::div//following-sibling::div//*[@data-testid='ArrowDropDownIcon']")
	private WebElement lstPeriodId;

	@FindBy(xpath = "//span[contains(text(),'Due Date')]//following::input")
	private WebElement txtDueDate;

	@FindBy(xpath = "//div[@class='ql-editor ql-blank']")
	private WebElement txtOverviewAndInstructions;

	@FindBy(xpath = "//div[@aria-label='Initiate Workflow']")
	private WebElement btnIntiateWorkFlow;
	
	@FindBy(xpath = "//div[@aria-label='Workflow Monitor']")
	private WebElement btnWorkFlowMonitor;

	@FindBy(xpath = "//div[text()='Initiated Workflow Successfully!']")
	private WebElement msgSucessIntiateWorkFlow;
	
	@FindBy(xpath = "//div[contains(@col-id,'status')]//div[contains(text(),'Completed')]")
	private WebElement eleWorkflowStatusCompleted;
	
	@FindBy(xpath = "//div[contains(@col-id,'status')]//div[contains(text(),'In progress')]")
	private WebElement eleWorkflowStatusInProgress;

	@FindBy(xpath = "//article/div[contains(text(),'Requests Completed:')]")
	private WebElement eleDRrequestCompletedPercentage;
	
	@FindBy(xpath = "//article/div[contains(text(),'Requests In Progress')]")
	private WebElement eleDRrequestInProgressPercentage;
	
	@FindBy(xpath = "//div[@col-id='dataRequestName' and @role!='columnheader']//a")
	private WebElement lnkDRNameInWorkFlowMonitor;
	
	@FindBy(xpath = "//div[@col-id='dataRequestName' and @role!='columnheader']//div")
	private WebElement eleDRNameInWorkFlowMonitor;
	
	
	@FindBy(xpath = "//div[@col-id='companyName' and @role!='columnheader']")
	private WebElement eleOrgNameInWorkFlowMonitor;
	

	
	
	

	public void createDataRequestInDataRequestPage() {

		try {
			waitForElement(btnPlusCreateDR);

			clickOn(btnPlusCreateDR, "CreateData Request PlusIcon");

			clickOn(btnForwardArrowIcon, "Forward Arrow Icon");

			clickOn(btnForwardArrowIcon, "Forward Arrow Icon");

			clickOn(btnForwardArrowIcon, "Forward Arrow Icon");

			GlobalVariables.dataRequestName = data.get("DataRequestName") + "rand_" + generateRandomString(2)
					+ generateRandomNumber(3);

			enterText(txtDRName, "Data RequestName", GlobalVariables.dataRequestName);

			clickOn(lstSelectCatalog, "Select CatalogName");

			GlobalVariables.catalogName = data.get("CatalogName");

			String xpathCatalog = "//ul/li[text()='" + data.get("CatalogName") + "']";

			clickOnElementWithDynamicXpath(xpathCatalog, "CatalogName");

			clickOn(btnNext, "Next Button");

			enterText(txtDueDate, data.get("DueDate"), "Due date");

			clickOn(btnNext, "Next Button");

			enterText(txtOverviewAndInstructions, "OverViewInstructions",data.get("OverviewInstructions"));

			clickOn(btnCreate, "Create Button");

			SelectTopicAndMetricsForDR();
		} catch (Exception e) {
			failed(driver, "Exception caught " + e.getMessage());
		}

	}

	public void SelectTopicAndMetricsForDR() {

		String xpathTopicNamechkbox = "//span[text()= '" + data.get("TopicName")
				+ "']//preceding-sibling::span[@ref='eCheckbox']//input";

		clickOnElementWithDynamicXpath(xpathTopicNamechkbox, "TopicName CheckBox");

		clickOn(btnSave, "Save button");
	}

	public void validateCreatedDataRequestInDataRequestPage() {

		String xpathDRName = "//div/p[text()='" + GlobalVariables.dataRequestName + "']";

		WebElement eleDRName = driver.findElement(By.xpath(xpathDRName));

		if (isElementPresent(eleDRName)) {

			passed("Successfully validated the  created DR in Data request Page");

		} else {
			failed(driver, "Failed To validate the created DR in Data request Page");
		}

	}
	
	
	public void ValidateSortOrderInDRPage() {
	
		try {
			waitForElement(btnPlusCreateDR);

			clickOn(btnPlusCreateDR, "CreateData Request PlusIcon");

			clickOn(btnForwardArrowIcon, "Forward Arrow Icon");

			clickOn(btnForwardArrowIcon, "Forward Arrow Icon");

			clickOn(btnForwardArrowIcon, "Forward Arrow Icon");

			String dataRequestName = data.get("DataRequestName") + "rand_" + generateRandomString(2)
					+ generateRandomNumber(3);

			enterText(txtDRName, "Data RequestName", dataRequestName);

			clickOn(lstSelectCatalog, "Select CatalogName");

			String xpathCatalog = "//ul/li[text()='" + data.get("SortCatalogName") + "']";

			clickOnElementWithDynamicXpath(xpathCatalog, "CatalogName");

			clickOn(btnNext, "Next Button");

			enterText(txtDueDate, data.get("DueDate"), "Due date");

			clickOn(btnNext, "Next Button");

			enterText(txtOverviewAndInstructions, "OverViewInstructions",data.get("OverviewInstructions"));

			clickOn(btnCreate, "Create Button");
			
			String xpathTopicNamechkbox = "//span[text()= '" + data.get("TopicName")+ "']//preceding-sibling::span[@ref='eCheckbox']//input";

			clickOnElementWithDynamicXpath(xpathTopicNamechkbox, "TopicName CheckBox");

			clickOn(btnSave, "Save button");
			
			String xpathDRName = "//div/p[text()='" +dataRequestName+ "']";

			WebElement eleDRName = driver.findElement(By.xpath(xpathDRName));

			clickOn(eleDRName,dataRequestName);
			
			String xpathExpandDataRequest = "//span/span[text()='" + data.get("TopicName")+ "']//parent::span//preceding-sibling::span[@ref='eContracted']";

	       clickOnElementWithDynamicXpath(xpathExpandDataRequest, "Expand  Data request Link");
	       
	   	WebElement eleSortMetriNameHeader = driver.findElement(By.xpath("//span[text()='Metric Name']//ancestor::div[contains(@class,'sorted')]"));
	   	
	   	WebElement eleSortUnitHeader = driver.findElement(By.xpath("//span[text()='Unit']//ancestor::div[contains(@class,'sorted')]"));
	   	
	   	WebElement eleSortInstructionHeader = driver.findElement(By.xpath("//span[text()='Instructions']//ancestor::div[contains(@class,'sorted')]"));

	   if(eleSortMetriNameHeader.getAttribute("class").contains("sorted-none")) {
		   
		   passed(" ");
		   
		 	
	   }else {
		   failed(driver,"");
	   }
	  
	  
	   clickOn(eleSortMetriNameHeader, "MetricName Header");
	   
	   String order=eleSortMetriNameHeader.getAttribute("class").split("sorted-")[1];
	   
	   if(order.equals("asc"))
	   {
		  
		   
		   
	   }
	   
	      
	     
	   
			
	   
			
			
	 
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}

	public void validateIntiateWorkFlow() {

		try {
			String xpathDRName = "//div/p[text()='" + GlobalVariables.dataRequestName + "']";

			WebElement eleDRName = driver.findElement(By.xpath(xpathDRName));

			clickOn(eleDRName, GlobalVariables.dataRequestName);

			clickOn(btnIntiateWorkFlow, "IntiateWorkFlow Button");

			String xpathOrgNamechkbox = "//span[text()= '" + data.get("OrgName")
					+ "']//preceding-sibling::div/div[@ref='eCheckbox']//input";

			clickOnElementWithDynamicXpath(xpathOrgNamechkbox, "organization");

			clickOn(btnSubmit, "Submit button");

			if (isElementPresent(msgSucessIntiateWorkFlow)) {
				passed("Successfully validated Sucessful DR Intiated Messege");
			} else {
				failed(driver, "Failed to validate Sucessful DR Intiated Messege");
			}
		} catch (Exception e) {
			failed(driver, "Exception caught " + e.getMessage());
		}

	}


	public void validateApprovalDRFlowStatusForCompleteApproval() {

		try {
			String xpathStatusCompleted = "//p[text()='"+GlobalVariables.dataRequestName+"']//parent::div//following-sibling::div//div[contains(text(),'Completed')]";
			WebElement eleStatusCompleted = driver.findElement(By.xpath(xpathStatusCompleted));
			String strCompletedStatus=eleStatusCompleted.getText();
			
			String[] arrStrComplete=strCompletedStatus.split("/");

			if (arrStrComplete[0].contains("1") && arrStrComplete[1].contains("0")) {
				passed("Successfully validated the Data Request status for Complete Approval flow ");
			} else {
				failed(driver, "Failed to validate the Data Request status for Complete Approval flow ");
			}
		} catch (Exception e) {
			failed(driver, "Exception caught " + e.getMessage());
		}

	}
	
	public void validateApprovalDRFlowStatusWithoutCompleteApproval() {

		try {
			String xpathStatusCompleted = "//p[text()='"+GlobalVariables.dataRequestName+"']//parent::div//following-sibling::div//div[contains(text(),'Completed')]";
			WebElement eleStatusCompleted = driver.findElement(By.xpath(xpathStatusCompleted));
			String strCompletedStatus=eleStatusCompleted.getText();
			
			String[] arrStrComplete=strCompletedStatus.split("/");

			if (arrStrComplete[0].contains("0") && arrStrComplete[1].contains("1")) {
				passed("Successfully validated the Data Request status for without complete approval flow");
			} else {
				failed(driver, "Failed to validate the Data Request status for without complete approval flow");
			}
		} catch (Exception e) {
			failed(driver, "Exception caught " + e.getMessage());
		}

	}
	
	public void NavigateToDRWorkFlowMonitor() {
		
		try {
			String xpathDRName = "//div/p[text()='" + GlobalVariables.dataRequestName + "']";

			WebElement eleDRName = driver.findElement(By.xpath(xpathDRName));

			clickOn(eleDRName, GlobalVariables.dataRequestName);

			clickOn(btnWorkFlowMonitor, "WorkFlow Monitor Button");
		} catch (Exception e) {
			failed(driver, "Exception caught " + e.getMessage());
		
		}

	}
	
	public void ValidateDRNameLinkNavigationToValidPage() {
		
		try {
			String xpathNameInWorkflowMonitor="//div/*[contains(text(),'"+data.get("DataRequestName")+"')]";
			
			clickOnElementWithDynamicXpath(xpathNameInWorkflowMonitor, "DR Name Link in WorkFlow Monitor");
			
			String xpathCatalogName="//div/*[contains(text(),'"+data.get("CatalogName")+"')]";
			
			WebElement catalogName=driver.findElement(By.xpath(xpathCatalogName));
			
			if(isElementPresent(catalogName)) {
				passed("Successfully validated DR Link navigation To valid Page from WorkFlow Monitor ");
			} else {
				failed(driver, "Failed to validate DR Link navigation To valid Page from WorkFlow Monitor");
			}
		} catch (Exception e) {
			failed(driver, "Exception caught " + e.getMessage());
		}
		
		
		
		
	}
	
	
	public void validateWorkFlowMonitorStatusForDRCompleteApproval() {

		try {
			
			Thread.sleep(3000);
			waitForElement(eleDRrequestInProgressPercentage);
			
			if (eleDRrequestInProgressPercentage.getText().contains("0")) {
				passed("Successfully validated the Data Request In Progress Percentage ");
			} else {
				failed(driver, "Failed to validated the Data Request In Progress Percentage ");
			}
			Thread.sleep(3000);
			waitForElement(eleDRrequestCompletedPercentage);
			if (eleDRrequestCompletedPercentage.getText().contains("100")) {
				passed("Successfully validated the Data Request Completed  Percentage ");
			} else {
				failed(driver, "Failed to validated the Data Request Completed  Percentage  ");
			}

			String dataRequestNameInWorkFlowMonitor = lnkDRNameInWorkFlowMonitor.getText();

			if (dataRequestNameInWorkFlowMonitor.equals(GlobalVariables.dataRequestName)) {

				passed("Successfully validated the Data Request Name in  Work flow Monitor ");
			} else {
				failed(driver, "Failed to validate Data Request Name in  Work flow Monitor ");
			}

			
			
		((JavascriptExecutor)driver).executeScript("document.querySelector('div[ref=eViewport]').scrollLeft=2000");

		
			
			if (isElementPresent(eleWorkflowStatusCompleted)) {

				passed("Successfully validated the Data Request Status  In WorkFlow Monitor ");
			} else {
				failed(driver, "Failed to validateRequest Status  In WorkFlow Monitor ");
			}
		
			((JavascriptExecutor)driver).executeScript("document.querySelector('div[ref=eViewport]').scrollLeft=-2000");
			
		} catch (Exception e) {
			failed(driver, "Exception caught " + e.getMessage());
		}

	}
	
	public void validateWorkFlowMonitorStatusForDRWithoutCompleteApproval() {

		try {
			
			Thread.sleep(3000);
			waitForElement(eleDRrequestInProgressPercentage);
			if (eleDRrequestInProgressPercentage.getText().contains("100")) {
				passed("Successfully validated the Data Request In Progress Percentage ");
			} else {
				failed(driver, "Failed to validated the Data Request In Progress Percentage ");
			}

			Thread.sleep(3000);
			waitForElement(eleDRrequestCompletedPercentage);
			if (eleDRrequestCompletedPercentage.getText().contains("0")) {
				passed("Successfully validated the Data Request Completed  Percentage ");
			} else {
				failed(driver, "Failed to validated the Data Request Completed  Percentage  ");
			}

			String dataRequestNameInWorkFlowMonitor = eleDRNameInWorkFlowMonitor.getText();

			if (dataRequestNameInWorkFlowMonitor.equals(GlobalVariables.dataRequestName)) {

				passed("Successfully validated the Data Request Name in  Work flow Monitor ");
			} else {
				failed(driver, "Failed to validate Data Request Name in  Work flow Monitor ");
			}
			

			((JavascriptExecutor)driver).executeScript("document.querySelector('div[ref=eViewport]').scrollLeft=2000");
			
			if (isElementPresent(eleWorkflowStatusInProgress)) {

				passed("Successfully validated the Data Request Status  In WorkFlow Monitor ");
			} else {
				failed(driver, "Failed to validateRequest Status  In WorkFlow Monitor ");
			}
		} catch (Exception e) {
			failed(driver, "Exception caught " + e.getMessage());
		}

	}
	
	
	


	@Override

	protected void VerifyNavigationToValidPage() {

		try {
			Thread.sleep(3000);
			waitForElement(lblDataRequest);

			if (isElementPresent(lblDataRequest)) {

				passed("User Successfully Navigated To Data Request Page");
			} else {
				failed(driver, "failed To Navigate To Data Request Page");
			}

			takeScreenshot(driver);

		} catch (Exception e) {
			failed(driver, "Exception caught " + e.getMessage());
		}

	}

}

//span[@aria-label='Custom Metric']//following-sibling::span
//span[@aria-label='Custom Metric']//following::div[@col-id='unit']	
//span[@aria-label='Custom Metric']//following::div[@col-id='instruction']

//span[text()='Metric Name']//parent::div//parent::div[contains(@class,'sorted')]
//span[@ref='eValue']
//span[@ref='eValue']//ancestor::div[@role='row']